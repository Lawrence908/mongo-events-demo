@startuml EventSphere_Collection_Diagram

!define MDB_GREEN #00ED64
!define MDB_FOREST #00684A
!define MDB_EVERGREEN #023430
!define MDB_SLATE #001E2B
!define MDB_ACCENT #00ED64
!define BACKGROUND_DARK #0a0f0f
!define CARD_DARK #0f151b
!define TEXT_LIGHT #e2e8f0
!define TEXT_MUTED #cbd5e1

skinparam backgroundColor BACKGROUND_DARK
skinparam class {
    BackgroundColor CARD_DARK
    BorderColor MDB_ACCENT
    FontColor TEXT_LIGHT
    FontSize 12
    FontStyle bold
}
skinparam ClassAttributeFontColor TEXT_LIGHT
skinparam ArrowColor MDB_ACCENT
skinparam note {
    BackgroundColor CARD_DARK
    BorderColor MDB_ACCENT
    FontColor TEXT_LIGHT
    FontSize 10
}

package "MongoDB Collections" {
    class "EVENTS Collection" as events {
        .. Document Structure ..
        _id: ObjectId
        title: String
        description: String
        category: String
        eventType: String
        schemaVersion: String
        location: GeoJSON Point
        venueId: ObjectId [REFERENCE]
        venueReference: Object [EXTENDED REFERENCE]
        startDate: Date
        endDate: Date
        organizer: String
        maxAttendees: Number
        currentAttendees: Number
        price: Number
        currency: String
        isFree: Boolean
        status: String
        tags: String[]
        .. EMBEDDED SUBDOCUMENTS ..
        tickets: Array[Object] [EMBEDDED]
        attendees: Array[Object] [EMBEDDED]
        computedStats: Object [EMBEDDED]
        .. POLYMORPHIC FIELDS ..
        virtualDetails: Object [OPTIONAL]
        recurringDetails: Object [OPTIONAL]
        hybridDetails: Object [OPTIONAL]
        metadata: Object [OPTIONAL]
        .. Timestamps ..
        createdAt: Date
        updatedAt: Date
    }

    class "VENUES Collection" as venues {
        .. Document Structure ..
        _id: ObjectId
        name: String
        venueType: String
        schemaVersion: String
        description: String
        location: GeoJSON Point
        capacity: Number
        amenities: String[]
        contact: Object
        pricing: Object
        availability: Object
        rating: Number
        reviewCount: Number
        .. EMBEDDED SUBDOCUMENTS ..
        address: Object [EMBEDDED]
        computedStats: Object [EMBEDDED]
        .. POLYMORPHIC FIELDS ..
        conferenceCenterDetails: Object [OPTIONAL]
        parkDetails: Object [OPTIONAL]
        virtualSpaceDetails: Object [OPTIONAL]
        .. Timestamps ..
        createdAt: Date
        updatedAt: Date
    }

    class "USERS Collection" as users {
        .. Document Structure ..
        _id: ObjectId
        email: String
        schemaVersion: String
        .. EMBEDDED SUBDOCUMENTS ..
        profile: Object [EMBEDDED]
        .. Timestamps ..
        createdAt: Date
        lastLogin: Date
    }

    class "REVIEWS Collection" as reviews {
        .. Document Structure ..
        _id: ObjectId
        eventId: ObjectId [REFERENCE]
        venueId: ObjectId [REFERENCE]
        userId: ObjectId [REFERENCE]
        rating: Number
        comment: String
        schemaVersion: String
        createdAt: Date
        updatedAt: Date
    }

    class "CHECKINS Collection" as checkins {
        .. Document Structure ..
        _id: ObjectId
        eventId: ObjectId [REFERENCE]
        userId: ObjectId [REFERENCE]
        venueId: ObjectId [REFERENCE]
        checkInTime: Date
        qrCode: String
        ticketTier: String
        checkInMethod: String
        location: GeoJSON Point
        metadata: Object
        schemaVersion: String
        createdAt: Date
    }
}

' Relationships
events --> venues : "venueId (REFERENCE)"
events --> venues : "venueReference (EXTENDED REFERENCE)"
reviews --> events : "eventId (REFERENCE)"
reviews --> venues : "venueId (REFERENCE)"
reviews --> users : "userId (REFERENCE)"
checkins --> events : "eventId (REFERENCE)"
checkins --> venues : "venueId (REFERENCE)"
checkins --> users : "userId (REFERENCE)"

' Notes explaining design decisions
note top of events
**EMBEDDED DOCUMENTS:**
• tickets[] - Always displayed with events
• attendees[] - Quick RSVP display
• computedStats - Pre-calculated for performance
• venueReference - Extended reference for filtering

**POLYMORPHIC DESIGN:**
• eventType discriminator
• Type-specific fields (virtualDetails, etc.)
• Schema versioning support
end note

note top of venues
**EMBEDDED DOCUMENTS:**
• address - Always needed with venue
• computedStats - Pre-calculated analytics

**POLYMORPHIC DESIGN:**
• venueType discriminator
• Type-specific fields (conferenceCenterDetails, etc.)
• Schema versioning support
end note

note top of checkins
**BRIDGE COLLECTION:**
• Many-to-many relationship between users and events
• Denormalized venueId for analytics performance
• Unique constraint on (eventId, userId)
• Analytics-optimized indexes
end note

note right of reviews
**REFERENCE DESIGN:**
• Either eventId OR venueId (not both)
• Referenced for shared data across many events
• Optimized for aggregation queries
end note

note bottom of users
**EMBEDDED PROFILE:**
• User preferences embedded for performance
• Location data for geospatial queries
• Categories for personalized recommendations
end note

@enduml
